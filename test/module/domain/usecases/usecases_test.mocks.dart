// Mocks generated by Mockito 5.4.5 from annotations
// in hive_project/test/module/domain/usecases/usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:hive_project/module/domain/entities/food/food_entities.dart'
    as _i6;
import 'package:hive_project/module/domain/entities/ingredients/ingredients_entity.dart'
    as _i10;
import 'package:hive_project/module/domain/entities/ingredients_items/ingredient_items_entity.dart'
    as _i13;
import 'package:hive_project/module/domain/entities/intermediate_items/intermediate_items_entity.dart'
    as _i15;
import 'package:hive_project/module/domain/entities/report/credit_report_etities.dart'
    as _i18;
import 'package:hive_project/module/domain/entities/report/debit_report_entities.dart'
    as _i20;
import 'package:hive_project/module/domain/repositories/food_prep_repo.dart'
    as _i5;
import 'package:hive_project/module/domain/repositories/ingredients_items_repo.dart'
    as _i3;
import 'package:hive_project/module/domain/repositories/ingredients_repo.dart'
    as _i2;
import 'package:hive_project/module/domain/repositories/intermediate_items_repo.dart'
    as _i4;
import 'package:hive_project/module/domain/repositories/report/credit_report_repo.dart'
    as _i7;
import 'package:hive_project/module/domain/repositories/report/debit_report_repo.dart'
    as _i8;
import 'package:hive_project/module/domain/usecases/food_prep_usecases.dart'
    as _i16;
import 'package:hive_project/module/domain/usecases/ingredients_items_usecases.dart'
    as _i12;
import 'package:hive_project/module/domain/usecases/ingredients_usecases.dart'
    as _i9;
import 'package:hive_project/module/domain/usecases/intermediate_items_usecases.dart'
    as _i14;
import 'package:hive_project/module/domain/usecases/report/credit_report_usecases.dart'
    as _i17;
import 'package:hive_project/module/domain/usecases/report/debit_report_usecases.dart'
    as _i19;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIngredientsRepo_0 extends _i1.SmartFake
    implements _i2.IngredientsRepo {
  _FakeIngredientsRepo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIngredientsItemsRepo_1 extends _i1.SmartFake
    implements _i3.IngredientsItemsRepo {
  _FakeIngredientsItemsRepo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIntermediateItemsRepo_2 extends _i1.SmartFake
    implements _i4.IntermediateItemsRepo {
  _FakeIntermediateItemsRepo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFoodPrepRepo_3 extends _i1.SmartFake implements _i5.FoodPrepRepo {
  _FakeFoodPrepRepo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOtherRequiredFoodEntities_4 extends _i1.SmartFake
    implements _i6.OtherRequiredFoodEntities {
  _FakeOtherRequiredFoodEntities_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreditReportRepo_5 extends _i1.SmartFake
    implements _i7.CreditReportRepo {
  _FakeCreditReportRepo_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDebitReportRepo_6 extends _i1.SmartFake
    implements _i8.DebitReportRepo {
  _FakeDebitReportRepo_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IngredientsUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsUsecases extends _i1.Mock
    implements _i9.IngredientsUsecases {
  MockIngredientsUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IngredientsRepo get ingredient => (super.noSuchMethod(
        Invocation.getter(#ingredient),
        returnValue: _FakeIngredientsRepo_0(
          this,
          Invocation.getter(#ingredient),
        ),
      ) as _i2.IngredientsRepo);

  @override
  List<_i10.IngredientsEntity> getIngredients() => (super.noSuchMethod(
        Invocation.method(
          #getIngredients,
          [],
        ),
        returnValue: <_i10.IngredientsEntity>[],
      ) as List<_i10.IngredientsEntity>);

  @override
  _i11.Future<void> addIngredient(String? name) => (super.noSuchMethod(
        Invocation.method(
          #addIngredient,
          [name],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [IngredientsItemsUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsItemsUsecases extends _i1.Mock
    implements _i12.IngredientsItemsUsecases {
  MockIngredientsItemsUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.IngredientsItemsRepo get ingredientItems => (super.noSuchMethod(
        Invocation.getter(#ingredientItems),
        returnValue: _FakeIngredientsItemsRepo_1(
          this,
          Invocation.getter(#ingredientItems),
        ),
      ) as _i3.IngredientsItemsRepo);

  @override
  List<_i13.IngredientItemsEntity> getIngredientsItems() => (super.noSuchMethod(
        Invocation.method(
          #getIngredientsItems,
          [],
        ),
        returnValue: <_i13.IngredientItemsEntity>[],
      ) as List<_i13.IngredientItemsEntity>);

  @override
  _i11.Future<void> addIngredientItems(
    String? ingredientname,
    int? ingredientModels,
    double? ingredientPrice,
    int? materialsUnit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIngredientItems,
          [
            ingredientname,
            ingredientModels,
            ingredientPrice,
            materialsUnit,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void updateIngredientItem(
    String? ingredientName,
    int? newMaterialsUnit,
    double? newPrice,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateIngredientItem,
          [
            ingredientName,
            newMaterialsUnit,
            newPrice,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IntermediateItemsUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockIntermediateItemsUsecases extends _i1.Mock
    implements _i14.IntermediateItemsUsecases {
  MockIntermediateItemsUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.IntermediateItemsRepo get intermediateItems => (super.noSuchMethod(
        Invocation.getter(#intermediateItems),
        returnValue: _FakeIntermediateItemsRepo_2(
          this,
          Invocation.getter(#intermediateItems),
        ),
      ) as _i4.IntermediateItemsRepo);

  @override
  List<_i15.IntermediateItemsEntity> getIntermediateItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIntermediateItems,
          [],
        ),
        returnValue: <_i15.IntermediateItemsEntity>[],
      ) as List<_i15.IntermediateItemsEntity>);

  @override
  _i11.Future<void> addIntermediateItem(
    String? intermediateItemName,
    int? ingredientsItemModels,
    int? availableQuantity,
    int? requiredQuantity,
    int? servingQuantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIntermediateItem,
          [
            intermediateItemName,
            ingredientsItemModels,
            availableQuantity,
            requiredQuantity,
            servingQuantity,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void updateIntermediateItem(
    String? intermediateItemName,
    int? newServingQuantity,
    int? newRequiredQuantity,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateIntermediateItem,
          [
            intermediateItemName,
            newServingQuantity,
            newRequiredQuantity,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FoodPrepUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodPrepUsecases extends _i1.Mock implements _i16.FoodPrepUsecases {
  MockFoodPrepUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FoodPrepRepo get foodPrep => (super.noSuchMethod(
        Invocation.getter(#foodPrep),
        returnValue: _FakeFoodPrepRepo_3(
          this,
          Invocation.getter(#foodPrep),
        ),
      ) as _i5.FoodPrepRepo);

  @override
  List<_i6.FoodEntities> getFoodPrepItems() => (super.noSuchMethod(
        Invocation.method(
          #getFoodPrepItems,
          [],
        ),
        returnValue: <_i6.FoodEntities>[],
      ) as List<_i6.FoodEntities>);

  @override
  _i11.Future<void> addFoodPrepItems(
    String? foodPrepName,
    int? intermediateItemsModels,
    List<dynamic>? otherRequiredFoodEntities,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFoodPrepItems,
          [
            foodPrepName,
            intermediateItemsModels,
            otherRequiredFoodEntities,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i6.OtherRequiredFoodEntities> getOtherRequiredFoodItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOtherRequiredFoodItems,
          [],
        ),
        returnValue: _i11.Future<_i6.OtherRequiredFoodEntities>.value(
            _FakeOtherRequiredFoodEntities_4(
          this,
          Invocation.method(
            #getOtherRequiredFoodItems,
            [],
          ),
        )),
      ) as _i11.Future<_i6.OtherRequiredFoodEntities>);

  @override
  _i11.Future<void> addOtherRequiredFoodItems(
    String? itemName,
    double? quantity,
    double? price,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOtherRequiredFoodItems,
          [
            itemName,
            quantity,
            price,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [CreditReportUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreditReportUsecases extends _i1.Mock
    implements _i17.CreditReportUsecases {
  MockCreditReportUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CreditReportRepo get creditReport => (super.noSuchMethod(
        Invocation.getter(#creditReport),
        returnValue: _FakeCreditReportRepo_5(
          this,
          Invocation.getter(#creditReport),
        ),
      ) as _i7.CreditReportRepo);

  @override
  List<_i18.CreditEntities> getCreditReportItems() => (super.noSuchMethod(
        Invocation.method(
          #getCreditReportItems,
          [],
        ),
        returnValue: <_i18.CreditEntities>[],
      ) as List<_i18.CreditEntities>);

  @override
  _i11.Future<void> addCreditReportItems(
    String? ingredient,
    double? price,
    double? materialUnit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCreditReportItems,
          [
            ingredient,
            price,
            materialUnit,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [DebitReportUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebitReportUsecases extends _i1.Mock
    implements _i19.DebitReportUsecases {
  MockDebitReportUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.DebitReportRepo get debitReport => (super.noSuchMethod(
        Invocation.getter(#debitReport),
        returnValue: _FakeDebitReportRepo_6(
          this,
          Invocation.getter(#debitReport),
        ),
      ) as _i8.DebitReportRepo);

  @override
  List<_i20.DebitReportEntities> getDebitReportItems() => (super.noSuchMethod(
        Invocation.method(
          #getDebitReportItems,
          [],
        ),
        returnValue: <_i20.DebitReportEntities>[],
      ) as List<_i20.DebitReportEntities>);

  @override
  _i11.Future<void> addDebitReportItems(
    String? foodName,
    int? servingQuantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDebitReportItems,
          [
            foodName,
            servingQuantity,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}
