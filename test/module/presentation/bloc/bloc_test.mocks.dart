// Mocks generated by Mockito 5.4.5 from annotations
// in hive_project/test/module/presentation/bloc/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i15;

import 'package:bloc/bloc.dart' as _i17;
import 'package:hive_project/module/domain/usecases/food_prep_usecases.dart'
    as _i8;
import 'package:hive_project/module/domain/usecases/ingredients_items_usecases.dart'
    as _i4;
import 'package:hive_project/module/domain/usecases/ingredients_usecases.dart'
    as _i2;
import 'package:hive_project/module/domain/usecases/intermediate_items_usecases.dart'
    as _i6;
import 'package:hive_project/module/domain/usecases/report/credit_report_usecases.dart'
    as _i10;
import 'package:hive_project/module/domain/usecases/report/debit_report_usecases.dart'
    as _i12;
import 'package:hive_project/module/presentation/bloc/food/food_item_state.dart'
    as _i9;
import 'package:hive_project/module/presentation/bloc/food/food_items_bloc.dart'
    as _i22;
import 'package:hive_project/module/presentation/bloc/food/food_items_events.dart'
    as _i23;
import 'package:hive_project/module/presentation/bloc/ingredients/ingredients_bloc.dart'
    as _i14;
import 'package:hive_project/module/presentation/bloc/ingredients/ingredients_events.dart'
    as _i16;
import 'package:hive_project/module/presentation/bloc/ingredients/ingredients_state.dart'
    as _i3;
import 'package:hive_project/module/presentation/bloc/ingredients_items/ingredients_items_bloc.dart'
    as _i18;
import 'package:hive_project/module/presentation/bloc/ingredients_items/ingredients_items_events.dart'
    as _i19;
import 'package:hive_project/module/presentation/bloc/ingredients_items/ingredients_items_state.dart'
    as _i5;
import 'package:hive_project/module/presentation/bloc/intermediate_items/intermediate_items_bloc.dart'
    as _i20;
import 'package:hive_project/module/presentation/bloc/intermediate_items/intermediate_items_events.dart'
    as _i21;
import 'package:hive_project/module/presentation/bloc/intermediate_items/intermediate_items_state.dart'
    as _i7;
import 'package:hive_project/module/presentation/bloc/report/credit_report/credit_report_bloc.dart'
    as _i24;
import 'package:hive_project/module/presentation/bloc/report/credit_report/credit_report_events.dart'
    as _i25;
import 'package:hive_project/module/presentation/bloc/report/credit_report/credit_report_state.dart'
    as _i11;
import 'package:hive_project/module/presentation/bloc/report/debit_report/debit_report_bloc.dart'
    as _i26;
import 'package:hive_project/module/presentation/bloc/report/debit_report/debit_report_events.dart'
    as _i27;
import 'package:hive_project/module/presentation/bloc/report/debit_report/debit_report_state.dart'
    as _i13;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIngredientsUsecases_0 extends _i1.SmartFake
    implements _i2.IngredientsUsecases {
  _FakeIngredientsUsecases_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIngredientsState_1 extends _i1.SmartFake
    implements _i3.IngredientsState {
  _FakeIngredientsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIngredientsItemsUsecases_2 extends _i1.SmartFake
    implements _i4.IngredientsItemsUsecases {
  _FakeIngredientsItemsUsecases_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIngredientsItemsState_3 extends _i1.SmartFake
    implements _i5.IngredientsItemsState {
  _FakeIngredientsItemsState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIntermediateItemsUsecases_4 extends _i1.SmartFake
    implements _i6.IntermediateItemsUsecases {
  _FakeIntermediateItemsUsecases_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIntermediateItemsState_5 extends _i1.SmartFake
    implements _i7.IntermediateItemsState {
  _FakeIntermediateItemsState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFoodPrepUsecases_6 extends _i1.SmartFake
    implements _i8.FoodPrepUsecases {
  _FakeFoodPrepUsecases_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFoodPrepState_7 extends _i1.SmartFake implements _i9.FoodPrepState {
  _FakeFoodPrepState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreditReportUsecases_8 extends _i1.SmartFake
    implements _i10.CreditReportUsecases {
  _FakeCreditReportUsecases_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreditReportState_9 extends _i1.SmartFake
    implements _i11.CreditReportState {
  _FakeCreditReportState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDebitReportUsecases_10 extends _i1.SmartFake
    implements _i12.DebitReportUsecases {
  _FakeDebitReportUsecases_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDebitReportState_11 extends _i1.SmartFake
    implements _i13.DebitReportState {
  _FakeDebitReportState_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IngredientsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsBloc extends _i1.Mock implements _i14.IngredientsBloc {
  MockIngredientsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IngredientsUsecases get ingredientsUsecases => (super.noSuchMethod(
        Invocation.getter(#ingredientsUsecases),
        returnValue: _FakeIngredientsUsecases_0(
          this,
          Invocation.getter(#ingredientsUsecases),
        ),
      ) as _i2.IngredientsUsecases);

  @override
  set ingredientsUsecases(_i2.IngredientsUsecases? _ingredientsUsecases) =>
      super.noSuchMethod(
        Invocation.setter(
          #ingredientsUsecases,
          _ingredientsUsecases,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.IngredientsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeIngredientsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.IngredientsState);

  @override
  _i15.Stream<_i3.IngredientsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i15.Stream<_i3.IngredientsState>.empty(),
      ) as _i15.Stream<_i3.IngredientsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i16.IngredientsEvents? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i16.IngredientsEvents? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.IngredientsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i16.IngredientsEvents>(
    _i17.EventHandler<E, _i3.IngredientsState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i16.IngredientsEvents, _i3.IngredientsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void onChange(_i17.Change<_i3.IngredientsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IngredientsItemsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsItemsBloc extends _i1.Mock
    implements _i18.IngredientsItemsBloc {
  MockIngredientsItemsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.IngredientsItemsUsecases get ingredientsItemsUsecases =>
      (super.noSuchMethod(
        Invocation.getter(#ingredientsItemsUsecases),
        returnValue: _FakeIngredientsItemsUsecases_2(
          this,
          Invocation.getter(#ingredientsItemsUsecases),
        ),
      ) as _i4.IngredientsItemsUsecases);

  @override
  set ingredientsItemsUsecases(
          _i4.IngredientsItemsUsecases? _ingredientsItemsUsecases) =>
      super.noSuchMethod(
        Invocation.setter(
          #ingredientsItemsUsecases,
          _ingredientsItemsUsecases,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.IngredientsItemsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeIngredientsItemsState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.IngredientsItemsState);

  @override
  _i15.Stream<_i5.IngredientsItemsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i15.Stream<_i5.IngredientsItemsState>.empty(),
      ) as _i15.Stream<_i5.IngredientsItemsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i19.IngredientsItemsEvents? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i19.IngredientsItemsEvents? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.IngredientsItemsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i19.IngredientsItemsEvents>(
    _i17.EventHandler<E, _i5.IngredientsItemsState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i19.IngredientsItemsEvents,
                  _i5.IngredientsItemsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void onChange(_i17.Change<_i5.IngredientsItemsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IntermediateItemsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockIntermediateItemsBloc extends _i1.Mock
    implements _i20.IntermediateItemsBloc {
  MockIntermediateItemsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.IntermediateItemsUsecases get intermediateItemsUsecases =>
      (super.noSuchMethod(
        Invocation.getter(#intermediateItemsUsecases),
        returnValue: _FakeIntermediateItemsUsecases_4(
          this,
          Invocation.getter(#intermediateItemsUsecases),
        ),
      ) as _i6.IntermediateItemsUsecases);

  @override
  set intermediateItemsUsecases(
          _i6.IntermediateItemsUsecases? _intermediateItemsUsecases) =>
      super.noSuchMethod(
        Invocation.setter(
          #intermediateItemsUsecases,
          _intermediateItemsUsecases,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.IntermediateItemsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeIntermediateItemsState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.IntermediateItemsState);

  @override
  _i15.Stream<_i7.IntermediateItemsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i15.Stream<_i7.IntermediateItemsState>.empty(),
      ) as _i15.Stream<_i7.IntermediateItemsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i21.IntermediateItemsEvents? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i21.IntermediateItemsEvents? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.IntermediateItemsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i21.IntermediateItemsEvents>(
    _i17.EventHandler<E, _i7.IntermediateItemsState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i21.IntermediateItemsEvents,
                  _i7.IntermediateItemsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void onChange(_i17.Change<_i7.IntermediateItemsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FoodPrepBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodPrepBloc extends _i1.Mock implements _i22.FoodPrepBloc {
  MockFoodPrepBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.FoodPrepUsecases get foodPrepUsecases => (super.noSuchMethod(
        Invocation.getter(#foodPrepUsecases),
        returnValue: _FakeFoodPrepUsecases_6(
          this,
          Invocation.getter(#foodPrepUsecases),
        ),
      ) as _i8.FoodPrepUsecases);

  @override
  _i9.FoodPrepState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeFoodPrepState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.FoodPrepState);

  @override
  _i15.Stream<_i9.FoodPrepState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i15.Stream<_i9.FoodPrepState>.empty(),
      ) as _i15.Stream<_i9.FoodPrepState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i23.FoodPrepEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i23.FoodPrepEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i9.FoodPrepState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i23.FoodPrepEvent>(
    _i17.EventHandler<E, _i9.FoodPrepState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i23.FoodPrepEvent, _i9.FoodPrepState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void onChange(_i17.Change<_i9.FoodPrepState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CreditReportBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreditReportBloc extends _i1.Mock implements _i24.CreditReportBloc {
  MockCreditReportBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.CreditReportUsecases get creditReportUsecases => (super.noSuchMethod(
        Invocation.getter(#creditReportUsecases),
        returnValue: _FakeCreditReportUsecases_8(
          this,
          Invocation.getter(#creditReportUsecases),
        ),
      ) as _i10.CreditReportUsecases);

  @override
  _i11.CreditReportState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCreditReportState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.CreditReportState);

  @override
  _i15.Stream<_i11.CreditReportState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i15.Stream<_i11.CreditReportState>.empty(),
      ) as _i15.Stream<_i11.CreditReportState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i25.CreditReportEvents? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i25.CreditReportEvents? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i11.CreditReportState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i25.CreditReportEvents>(
    _i17.EventHandler<E, _i11.CreditReportState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i25.CreditReportEvents, _i11.CreditReportState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void onChange(_i17.Change<_i11.CreditReportState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DebitReportBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebitReportBloc extends _i1.Mock implements _i26.DebitReportBloc {
  MockDebitReportBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.DebitReportUsecases get debitReportUsecases => (super.noSuchMethod(
        Invocation.getter(#debitReportUsecases),
        returnValue: _FakeDebitReportUsecases_10(
          this,
          Invocation.getter(#debitReportUsecases),
        ),
      ) as _i12.DebitReportUsecases);

  @override
  _i13.DebitReportState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDebitReportState_11(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.DebitReportState);

  @override
  _i15.Stream<_i13.DebitReportState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i15.Stream<_i13.DebitReportState>.empty(),
      ) as _i15.Stream<_i13.DebitReportState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i27.DebitReportEvents? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i27.DebitReportEvents? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i13.DebitReportState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i27.DebitReportEvents>(
    _i17.EventHandler<E, _i13.DebitReportState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i27.DebitReportEvents, _i13.DebitReportState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void onChange(_i17.Change<_i13.DebitReportState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
