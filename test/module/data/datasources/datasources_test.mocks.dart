// Mocks generated by Mockito 5.4.5 from annotations
// in hive_project/test/module/data/datasources/datasources_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hive/hive.dart' as _i2;
import 'package:hive_project/module/data/datasources/food_prep_data_source.dart'
    as _i10;
import 'package:hive_project/module/data/datasources/ingredients_data_source.dart'
    as _i3;
import 'package:hive_project/module/data/datasources/ingredients_items_data_source.dart'
    as _i6;
import 'package:hive_project/module/data/datasources/intermediate_items_data_source.dart'
    as _i8;
import 'package:hive_project/module/data/datasources/report/credit_report_data_source.dart'
    as _i12;
import 'package:hive_project/module/data/datasources/report/debit_report_data_source.dart'
    as _i14;
import 'package:hive_project/module/data/models/food/food_models.dart' as _i11;
import 'package:hive_project/module/data/models/ingredients/ingredients_models.dart'
    as _i5;
import 'package:hive_project/module/data/models/ingredients_items/ingredients_item_models.dart'
    as _i7;
import 'package:hive_project/module/data/models/intermediate_items/intermediate_item_models.dart'
    as _i9;
import 'package:hive_project/module/data/models/report/credit_models.dart'
    as _i13;
import 'package:hive_project/module/data/models/report/debit_models.dart'
    as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IngredientsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsDataSource extends _i1.Mock
    implements _i3.IngredientsDataSource {
  MockIngredientsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addIngredient(String? name) => (super.noSuchMethod(
        Invocation.method(
          #addIngredient,
          [name],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i5.IngredientModels> getIngredients() => (super.noSuchMethod(
        Invocation.method(
          #getIngredients,
          [],
        ),
        returnValue: <_i5.IngredientModels>[],
      ) as List<_i5.IngredientModels>);
}

/// A class which mocks [IngredientsDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsDataSourceImpl extends _i1.Mock
    implements _i3.IngredientsDataSourceImpl {
  MockIngredientsDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i5.IngredientModels> get ingredientBox => (super.noSuchMethod(
        Invocation.getter(#ingredientBox),
        returnValue: _FakeBox_0<_i5.IngredientModels>(
          this,
          Invocation.getter(#ingredientBox),
        ),
      ) as _i2.Box<_i5.IngredientModels>);

  @override
  _i4.Future<void> addIngredient(String? name) => (super.noSuchMethod(
        Invocation.method(
          #addIngredient,
          [name],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i5.IngredientModels> getIngredients() => (super.noSuchMethod(
        Invocation.method(
          #getIngredients,
          [],
        ),
        returnValue: <_i5.IngredientModels>[],
      ) as List<_i5.IngredientModels>);
}

/// A class which mocks [IngredientsItemsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsItemsDataSource extends _i1.Mock
    implements _i6.IngredientsItemsDataSource {
  MockIngredientsItemsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addIngredientItems(
    String? ingredientname,
    int? ingredientModels,
    double? ingredientPrice,
    int? materialsUnit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIngredientItems,
          [
            ingredientname,
            ingredientModels,
            ingredientPrice,
            materialsUnit,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i7.IngredientsItemModels> getIngredientsItems() => (super.noSuchMethod(
        Invocation.method(
          #getIngredientsItems,
          [],
        ),
        returnValue: <_i7.IngredientsItemModels>[],
      ) as List<_i7.IngredientsItemModels>);
}

/// A class which mocks [IngredientsItemsDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsItemsDataSourceImpl extends _i1.Mock
    implements _i6.IngredientsItemsDataSourceImpl {
  MockIngredientsItemsDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i7.IngredientsItemModels> get ingredientItemsBox =>
      (super.noSuchMethod(
        Invocation.getter(#ingredientItemsBox),
        returnValue: _FakeBox_0<_i7.IngredientsItemModels>(
          this,
          Invocation.getter(#ingredientItemsBox),
        ),
      ) as _i2.Box<_i7.IngredientsItemModels>);

  @override
  _i4.Future<void> addIngredientItems(
    String? ingredientname,
    int? ingredientModels,
    double? price,
    int? materialsUnit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIngredientItems,
          [
            ingredientname,
            ingredientModels,
            price,
            materialsUnit,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i7.IngredientsItemModels> getIngredientsItems() => (super.noSuchMethod(
        Invocation.method(
          #getIngredientsItems,
          [],
        ),
        returnValue: <_i7.IngredientsItemModels>[],
      ) as List<_i7.IngredientsItemModels>);
}

/// A class which mocks [IntermediateItemsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIntermediateItemsDataSource extends _i1.Mock
    implements _i8.IntermediateItemsDataSource {
  MockIntermediateItemsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addIntermediateItem(
    String? intermediateItemName,
    int? ingredientsItemModels,
    int? availableQuantity,
    int? requiredQuantity,
    int? servingQuantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIntermediateItem,
          [
            intermediateItemName,
            ingredientsItemModels,
            availableQuantity,
            requiredQuantity,
            servingQuantity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i9.IntermediateItemsModels> getIntermediateItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIntermediateItems,
          [],
        ),
        returnValue: <_i9.IntermediateItemsModels>[],
      ) as List<_i9.IntermediateItemsModels>);
}

/// A class which mocks [IntermediateItemsDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockIntermediateItemsDataSourceImpl extends _i1.Mock
    implements _i8.IntermediateItemsDataSourceImpl {
  MockIntermediateItemsDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i9.IntermediateItemsModels> get intermediateItemsBox =>
      (super.noSuchMethod(
        Invocation.getter(#intermediateItemsBox),
        returnValue: _FakeBox_0<_i9.IntermediateItemsModels>(
          this,
          Invocation.getter(#intermediateItemsBox),
        ),
      ) as _i2.Box<_i9.IntermediateItemsModels>);

  @override
  _i4.Future<void> addIntermediateItem(
    String? intermediateItemName,
    int? ingredientsItemModels,
    int? availableQuantity,
    int? requiredQuantity,
    int? servingQuantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIntermediateItem,
          [
            intermediateItemName,
            ingredientsItemModels,
            availableQuantity,
            requiredQuantity,
            servingQuantity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i9.IntermediateItemsModels> getIntermediateItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIntermediateItems,
          [],
        ),
        returnValue: <_i9.IntermediateItemsModels>[],
      ) as List<_i9.IntermediateItemsModels>);
}

/// A class which mocks [FoodPrepDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodPrepDataSource extends _i1.Mock
    implements _i10.FoodPrepDataSource {
  MockFoodPrepDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addFoodPrep(
    String? foodName,
    int? intermediateItemsModels,
    List<_i11.OtherRequiredFoodModels>? otherRequiredFoodModels,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFoodPrep,
          [
            foodName,
            intermediateItemsModels,
            otherRequiredFoodModels,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i11.FoodModels> getFoodPrep() => (super.noSuchMethod(
        Invocation.method(
          #getFoodPrep,
          [],
        ),
        returnValue: <_i11.FoodModels>[],
      ) as List<_i11.FoodModels>);

  @override
  _i4.Future<void> addOtherRequiredFoodItems(
    String? itemName,
    double? quantity,
    double? price,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOtherRequiredFoodItems,
          [
            itemName,
            quantity,
            price,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i11.OtherRequiredFoodModels> getOtherRequiredFoodItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOtherRequiredFoodItems,
          [],
        ),
        returnValue: <_i11.OtherRequiredFoodModels>[],
      ) as List<_i11.OtherRequiredFoodModels>);
}

/// A class which mocks [FoodPrepDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodPrepDataSourceImpl extends _i1.Mock
    implements _i10.FoodPrepDataSourceImpl {
  MockFoodPrepDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i11.FoodModels> get foodBox => (super.noSuchMethod(
        Invocation.getter(#foodBox),
        returnValue: _FakeBox_0<_i11.FoodModels>(
          this,
          Invocation.getter(#foodBox),
        ),
      ) as _i2.Box<_i11.FoodModels>);

  @override
  _i2.Box<_i11.OtherRequiredFoodModels> get otherRequiredFoodBox =>
      (super.noSuchMethod(
        Invocation.getter(#otherRequiredFoodBox),
        returnValue: _FakeBox_0<_i11.OtherRequiredFoodModels>(
          this,
          Invocation.getter(#otherRequiredFoodBox),
        ),
      ) as _i2.Box<_i11.OtherRequiredFoodModels>);

  @override
  _i4.Future<void> addFoodPrep(
    String? foodName,
    int? intermediateItemsModels,
    List<_i11.OtherRequiredFoodModels>? otherRequiredFoodModels,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFoodPrep,
          [
            foodName,
            intermediateItemsModels,
            otherRequiredFoodModels,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i11.FoodModels> getFoodPrep() => (super.noSuchMethod(
        Invocation.method(
          #getFoodPrep,
          [],
        ),
        returnValue: <_i11.FoodModels>[],
      ) as List<_i11.FoodModels>);

  @override
  _i4.Future<void> addOtherRequiredFoodItems(
    String? itemName,
    double? quantity,
    double? price,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOtherRequiredFoodItems,
          [
            itemName,
            quantity,
            price,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i11.OtherRequiredFoodModels> getOtherRequiredFoodItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOtherRequiredFoodItems,
          [],
        ),
        returnValue: <_i11.OtherRequiredFoodModels>[],
      ) as List<_i11.OtherRequiredFoodModels>);
}

/// A class which mocks [CreditReportDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreditReportDataSource extends _i1.Mock
    implements _i12.CreditReportDataSource {
  MockCreditReportDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i13.CreditModels> getCreditReportItems() => (super.noSuchMethod(
        Invocation.method(
          #getCreditReportItems,
          [],
        ),
        returnValue: <_i13.CreditModels>[],
      ) as List<_i13.CreditModels>);

  @override
  _i4.Future<void> addCreditReportItems(
    String? ingredient,
    double? price,
    double? materialUnit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCreditReportItems,
          [
            ingredient,
            price,
            materialUnit,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CreditReportDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreditReportDataSourceImpl extends _i1.Mock
    implements _i12.CreditReportDataSourceImpl {
  MockCreditReportDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i13.CreditModels> get creditReportBox => (super.noSuchMethod(
        Invocation.getter(#creditReportBox),
        returnValue: _FakeBox_0<_i13.CreditModels>(
          this,
          Invocation.getter(#creditReportBox),
        ),
      ) as _i2.Box<_i13.CreditModels>);

  @override
  _i4.Future<void> addCreditReportItems(
    String? ingredient,
    double? price,
    double? materialUnit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCreditReportItems,
          [
            ingredient,
            price,
            materialUnit,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i13.CreditModels> getCreditReportItems() => (super.noSuchMethod(
        Invocation.method(
          #getCreditReportItems,
          [],
        ),
        returnValue: <_i13.CreditModels>[],
      ) as List<_i13.CreditModels>);
}

/// A class which mocks [DebitReportDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebitReportDataSource extends _i1.Mock
    implements _i14.DebitReportDataSource {
  MockDebitReportDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i15.DebitModels> getDebitReportItems() => (super.noSuchMethod(
        Invocation.method(
          #getDebitReportItems,
          [],
        ),
        returnValue: <_i15.DebitModels>[],
      ) as List<_i15.DebitModels>);

  @override
  _i4.Future<void> addDebitReportItems(
    String? foodName,
    int? servingQuantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDebitReportItems,
          [
            foodName,
            servingQuantity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DebitReportDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebitReportDataSourceImpl extends _i1.Mock
    implements _i14.DebitReportDataSourceImpl {
  MockDebitReportDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i15.DebitModels> get debitReportBox => (super.noSuchMethod(
        Invocation.getter(#debitReportBox),
        returnValue: _FakeBox_0<_i15.DebitModels>(
          this,
          Invocation.getter(#debitReportBox),
        ),
      ) as _i2.Box<_i15.DebitModels>);

  @override
  _i4.Future<void> addDebitReportItems(
    String? foodName,
    int? servingQuantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDebitReportItems,
          [
            foodName,
            servingQuantity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i15.DebitModels> getDebitReportItems() => (super.noSuchMethod(
        Invocation.method(
          #getDebitReportItems,
          [],
        ),
        returnValue: <_i15.DebitModels>[],
      ) as List<_i15.DebitModels>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i2.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i16.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i4.Stream<_i2.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i4.Stream<_i2.BoxEvent>.empty(),
      ) as _i4.Stream<_i2.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i4.Future<Iterable<int>>.value(<int>[]),
      ) as _i4.Future<Iterable<int>>);

  @override
  _i4.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
